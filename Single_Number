//we have to return the number that is not the duplicate
class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums); //sort the numbers first because that way we know the number next to it should be the duplicate
        for(int i = 0; i< nums.length; i++){
            if(i==0){//checks for the first element because there is no i-1
                if(i+1<nums.length-1){
                if(nums[i]!=nums[i+1]){
                    return nums[i]; 
                }
                }
                if(nums.length==1){//checks if there is only one element 
                    return nums[0]; 
                }
            }
            if(i==nums.length-1){//checks if up until the last element could be the single number
                if(nums[i]!=nums[i-1]){
                    return nums[i]; 
                }
            }
            else{
                if(i-1>=0){//checks the other elements because you want to ccheck the onese before and after i
                    if(i+1<nums.length-1){
                if((nums[i-1]!=nums[i])&& (nums[i]!=nums[i+1])){
                    return nums[i]; 
                }
            }
                }
            }
            
    }
        return 0; 
   
}
}
